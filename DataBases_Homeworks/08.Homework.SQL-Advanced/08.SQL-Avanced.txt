01.
SELECT FirstName, LastName, Salary
FROM Employees 
WHERE Salary=(SELECT MIN(Salary) FROM Employees)

02.
SELECT FirstName, LastName, Salary
FROM Employees 
WHERE Salary<(SELECT MIN(Salary)*1.1 FROM Employees)

03.
SELECT FirstName+ ' '+ LastName AS [Full Name], Salary, d.Name AS [Dep. Name]
FROM Employees e, Departments d
WHERE Salary=(SELECT MIN(Salary)FROM Employees s WHERE s.DepartmentID=d.DepartmentID)
ORDER BY Salary DESC

04.
SELECT AVG(Salary) AS [Average Salary]
FROM Employees
WHERE DepartmentID=1

05.
SELECT AVG(Salary) AS [Average Salary]
FROM Employees e, Departments d
WHERE  e.DepartmentID=d.DepartmentID AND Name='Sales'

06.
SELECT COUNT(e.LastName) AS [Count of 'Sales' Department Employees]
FROM Employees e, Departments d
WHERE  e.DepartmentID=d.DepartmentID AND d.Name='Sales'

07.
SELECT COUNT(e.LastName) AS [Number of employees with manager]
FROM Employees e
WHERE  e.ManagerID IS NOT NULL

08.
SELECT COUNT(e.LastName) AS [Number of employees with manager]
FROM Employees e
WHERE  e.ManagerID IS NULL

09.
SELECT AVG(e.Salary) AS [AverageSalary], d.Name AS [Name of department]
FROM Employees e, Departments d
WHERE  e.DepartmentID=d.DepartmentID
GROUP BY  d.Name 

10.
SELECT COUNT(e.LastName) AS [Number of employees], d.Name AS [Name of department], t.Name AS [Town]
FROM Employees e, Departments d, Towns t, Addresses a
WHERE  e.DepartmentID=d.DepartmentID
AND e.AddressID=a.AddressID
AND a.TownID=t.TownID
GROUP BY   t.Name, d.Name

11.*
SELECT e.FirstName + ' ' + e.LastName AS [Names of manager with 5 employees]
FROM Employees e, Employees m
WHERE e.ManagerID = m.EmployeeID OR m.ManagerID IS NULL
GROUP BY e.EmployeeID, e.FirstName, e.LastName
HAVING COUNT(*)=5

12.
SELECT e.FirstName + ' ' + e.LastName AS [Name of Employee],ISNULL(m.FirstName+' '+m.LastName,('no manager')) AS [Manager]
FROM Employees e
LEFT OUTER JOIN Employees m
ON e.ManagerID=m.EmployeeID

13.
SELECT e.FirstName + ' ' + e.LastName AS [Name of Employee]
FROM Employees e
WHERE LEN(e.LastName)=5;

14.
SELECT CONVERT(VARCHAR(50),GETDATE(),104)+' '+CONVERT(VARCHAR(50),GETDATE(),114) AS[Date and time]

15.
CREATE TABLE Users(
Username VARCHAR(50) ,
Pass VARCHAR(50),
FirstName VARCHAR(50),
LastName VARCHAR(50),
LastLogin datetime
CONSTRAINT PK_Users PRIMARY KEY(Username),
CONSTRAINT Pass CHECK (LEN(Pass)>=5)
)
GO

16.
CREATE VIEW AllUsersFromToday AS
	SELECT *
	FROM Users u
	WHERE u.LastLogin = GETDATE()

17.
USE TelerikAcademy;
CREATE TABLE Groups(
Name NVARCHAR(50) NOT NULL UNIQUE , 
CONSTRAINT  PK_Groups PRIMARY KEY(Name)
)
GO

18.
ALTER TABLE Users
ADD GroupId INT FOREIGN KEY REFERENCES Groups(name)

19
INSERT INTO Groups
VALUES 
(2),
(3)
GO
INSERT INTO Users
values 
('zaio2','11111','Zaio','Baio1',GetDate(),1),
('zaio3','11111','Zaio','Baio2',GetDate(),2),
('zaio4','11111','Zaio','Baio3',GetDate(),3)
GO

20.
UPDATE Users SET
UserName='updated'
WHERE Username='zaio2'

21.
DELETE  Users
WHERE LastName='Baio3'
GO


22.
INSERT INTO  Users
(FirstName,LastName,Username,Pass,LastLogin)
SELECT e.FirstName,e.LastName,LOWER(LEFT(e.FirstName,1))+LOWER(LEFT(e.LastName,1))+LEFT(e.EmployeeID,4),e.EmployeeID+'12345',NULL
FROM Employees e

23.
UPDATE  Users
SET Pass=NULL
WHERE DATEDIFF(day, LastLogin, '2016-3-10 00:00:00') > 0

24.
DELETE Users
WHERE Pass IS  NULL

25.
SELECT AVG(e.Salary), e.JobTitle , d.Name  FROM Employees e, Departments d
WHERE d.DepartmentID=e.DepartmentID
GROUP BY e.JobTitle, d.Name

26.
SELECT MIN(e.Salary) as 'Min Salary', e.JobTitle , d.Name as 'Department name', 
e.FirstName + ' '+ e.LastName as 'Full Name'  FROM Employees e, Departments d
WHERE d.DepartmentID=e.DepartmentID
GROUP BY e.JobTitle, d.Name, e.FirstName + ' ' + e.LastName

27.
SELECT TOP  1 COUNT(a.TownID) as [EmployeeCount] FROM Addresses a
JOIN Employees e
ON e.AddressID=a.AddressID
JOIN Towns t
ON t.TownID=a.TownID
GROUP BY t.TownID 
ORDER BY EmployeeCount DESC

28.
SELECT  COUNT(a.TownID) as [EmployeeCount], t.Name FROM Addresses a
JOIN Employees e
ON e.AddressID=a.AddressID
JOIN Towns t
ON t.TownID=a.TownID
WHERE e.ManagerID IS  NOT NULL
GROUP BY t.Name 
ORDER BY EmployeeCount DESC

29.
--WorkHours--
DROP TABLE dbo.WorkHours
CREATE TABLE WorkHours(
Id INT PRIMARY KEY IDENTITY(1,1),
EmployeeId INT NOT NULL,
DateOfReport DATETIME,
Task NVARCHAR(50),
HoursOfWork INT,
Comments NVARCHAR(500),
CONSTRAINT FK_WorkHours_Employees FOREIGN KEY (EmployeeId) REFERENCES Employees(EmployeeID)
)


--Add some records--
DECLARE @counter int
SET @counter=0

WHILE @counter<30
BEGIN
INSERT INTO WorkHours(EmployeeId,DateOfReport,Task,HoursOfWork,Comments)
VALUES (@counter,GETDATE(),'task'+CONVERT(VARCHAR(5), @counter),8,'comment'+CONVERT(VARCHAR(5), @counter))
SET @counter=@counter +1
END
DROP TABLE WorkHoursLog
GO

--WorkLogs--
CREATE TABLE WorkHoursLog(
Id int PRIMARY KEY IDENTITY(1,1),
WorkHoursId int,
EmployeeId INT FOREIGN KEY REFERENCES Employees(EmployeeId),
DateOfReport DATETIME,
Task NVARCHAR(50),
HoursOfWork INT,
Comments NVARCHAR(500),
[Action] varchar(10) NOT NULL
)

-- triggers --

--INSERT--
DROP TRIGGER trg_WorkHours_Insert
GO
CREATE TRIGGER trg_WorkHours_Insert ON WorkHours
FOR INSERT 
AS
INSERT INTO WorkHoursLog(WorkHoursId, EmployeeId, DateOfReport, Task, HoursOfWork, Comments, [Action])
    SELECT Id, EmployeeID, DateOfReport, Task, HoursOfWork, Comments, 'Insert'
    FROM inserted
PRINT 'FOR INSERT trigger fired.'
GO

--DELTETE--
DROP TRIGGER trg_WorkHours_Delete
GO
CREATE TRIGGER trg_WorkHours_Delete ON WorkHours
FOR DELETE 
AS
INSERT INTO WorkHoursLog(WorkHoursId,EmployeeId, DateOfReport, Task, HoursOfWork, Comments, [Action])
    SELECT Id, EmployeeId, DateOfReport, Task, HoursOfWork, Comments, 'Delete'
    FROM deleted
PRINT 'FOR DELETE trigger fired.'
GO

--UPDATE--
DROP TRIGGER trg_WorkHours_Update
GO
CREATE TRIGGER trg_WorkHours_Update ON WorkHours
FOR UPDATE 
AS
INSERT INTO WorkHoursLog(WorkHoursId,EmployeeId, DateOfReport, Task, HoursOfWork, Comments, [Action])
    SELECT Id, EmployeeId, DateOfReport, Task, HoursOfWork, Comments, 'UPDATE'
    FROM inserted
PRINT 'FOR UPDATE trigger fired.'
GO


--Trigers tests--

--DELETE--
DELETE FROM  WorkHours 
WHERE EmployeeId=25


--INSERT--
DECLARE @counter INT
SET @counter=31

INSERT INTO WorkHours(EmployeeId,DateOfReport,Task,HoursOfWork,Comments)
VALUES (@counter,GETDATE(),'task'+CONVERT(VARCHAR(5), @counter),8,'comment'+CONVERT(VARCHAR(5), @counter))

--UPDATE--
UPDATE WorkHours
SET HoursOfWork=9 
WHERE HoursOfWork=8


30.
BEGIN TRAN

ALTER TABLE Departments
	DROP CONSTRAINT FK_Departments_Employees
GO

DELETE e FROM  Employees e, Departments d
	WHERE e.DepartmentID=d.DepartmentID
	AND d.Name='Sales'

ROLLBACK TRAN

31.
BEGIN TRAN

DROP TABLE EmployeesProjects

ROLLBACK TRAN

32.
BEGIN TRAN

SELECT *  INTO  #Temp_EmployeesProjects
FROM EmployeesProjects

DROP TABLE EmployeesProjects

SELECT * INTO EmployeesPRojects
FROM #Temp_EmployeesProjects

ROLLBACK TRAN



